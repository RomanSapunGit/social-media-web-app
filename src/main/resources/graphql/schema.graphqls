type Query {
    getPosts(page: Int, size: Int): [Post]
    getRoles: [Role]
    getPostById(id: ID): Post
}
type Post {
    id: ID!
    title: String!
    description: String!
    creationTime: String!
    identifier: String!
    author: User!
    tags: [Tag]!
    comments: [Comment]!
    images: [Image]
    upvotes: [User]
    downvotes: [User]
    userStatistics: UserStatistics
}
type User {
    id: ID!
    name: String
    username: String!
    email: String!
    password: String!
    notBlocked: String
    token: String
    googleToken: String
    tokenCreationDate: String
    roles: [Role]
    following: [User]
    savedPosts: [Post]
    savedComments: [Comment]
    followers: [User]
    posts: [Post]
    comments: [Comment]!
    image: Image
    userStatistics: UserStatistics
    notifications: [Notification]
}
type Tag {
    id: ID!
    name: String!
    posts: [Post]
}
type Comment {
    id: ID!
    title: String!
    description: String!
    identifier: String!
    creationTime: String
    author: User
    post: Post
    userStatistics: UserStatistics
    users: [User]
}
type Image {
    id: ID!
    identifier: String!
    name: String
    type: String
    imageData: String
    post: Post
    user: User
}

type UserStatistics {
    id: ID!
    consent: String
    user: User
    onlineTimesDuration: [Int]
    createdPosts: [Post]
    createdComments: [Comment]
    viewedPosts: [Post]
}
type Notification {
    id: ID!
    message: String!
    notificationCreationDate: String
    user: User
    post: Post
}
type Role {
    id: ID!
    name: String!
}